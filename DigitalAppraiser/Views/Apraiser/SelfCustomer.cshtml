@model DigitalAppraiser.Models.ViewModels.SelfCustomerModel

@using (Html.BeginForm("SelfCustomer", "Apraiser", FormMethod.Post, new { id = "formCustomerSelf" }))
{
    
    <div class="col-12 col-sm-12 col-md-12 col-lg-12 row">
        <div class="col-12 col-sm-12 col-md-6 col-lg-6" style="width:50%;">
            <h3 class="h3 text-center"> Customer Details</h3>
            <div class="form-group form-inline">
                <label class="offset-md-1 offset-lg-1 col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Date<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.selfCustomer.CreatedOn, new { id = "txtCreatedOn", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6" })
                <span class="fa fa-calendar" id="spnCalender" style="margin-left:-2rem;z-index:111;"></span>
                @Html.ValidationMessageFor(x => x.selfCustomer.CreatedOn, "", new { @class = "error offset-6 offset-sm-6 offset-md-6 offset-lg-6" })
            </div>
            <div class="form-group form-inline">
                <label class="offset-md-1 offset-lg-1 col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Name<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.selfCustomer.Name, new { id = "txtName", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6", autocomplete = "off", @onkeypress = "IsName(event)" })
                @Html.ValidationMessageFor(x => x.selfCustomer.Name, "", new { @class = "error offset-6 offset-sm-6 offset-md-6 offset-lg-6" })
            </div>
            <div class="form-group form-inline">
                <label class="offset-md-1 offset-lg-1 col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Aadhar</label>
                @Html.TextBoxFor(x => x.selfCustomer.UANNumber, new { id = "txtUANNumber", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6", @onkeypress = "IsNumeric(event)", @maxlength = "12", autocomplete = "off" })
            </div>
            <div class="form-group form-inline">
                <label class="offset-md-1 offset-lg-1 col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Mobile Number<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.selfCustomer.MobileNumber, new { id = "txtMobileNumber", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6", @maxlength = "10", @onkeypress = "IsNumeric(event)", autocomplete = "off" })
                @Html.ValidationMessageFor(x => x.selfCustomer.MobileNumber, "", new { @class = "error col-6 offset-6 offset-sm-6 offset-md-6 offset-lg-6" })
            </div>
            <div class="form-group form-inline">
                <label class="offset-md-1 offset-lg-1 col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Address<span style="color:red">*</span></label>
                @Html.TextAreaFor(x => x.selfCustomer.Address, new { id = "txtAddress", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6" })
                @Html.ValidationMessageFor(x => x.selfCustomer.Address, "", new { @class = "error offset-6 offset-sm-6 offset-md-6 offset-lg-6" })
            </div>
        </div>
        <div class="col-12 col-sm-12 col-md-6 col-lg-6">
            <h3 class="h3 text-center"> Ornament Details</h3>
            <div class="form-group form-inline">
                <label class="col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Ornament<span style="color:red">*</span></label>
                @Html.TextAreaFor(x => x.ornamentDetails.Ornament, new { id = "txtOrnament", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6" })
                @Html.ValidationMessageFor(x => x.ornamentDetails.Ornament, "", new { @class = "error offset-6 offset-sm-6 offset-md-4 offset-lg-4" })
            </div>
            <div class="form-group form-inline">
                <label class="col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Quantity<span style="color:red">*</span></label>
                @Html.DropDownListFor(x => x.ornamentDetails.Quantity, Model.Quantity, "Select", new { id = "ddQuantity", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6 width100" })
                @Html.ValidationMessageFor(x => x.ornamentDetails.Quantity, "", new { @class = "error offset-6 offset-sm-6 offset-md-4 offset-lg-4" })
            </div>
            <div class="form-group form-inline">
                <label class="col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Gross weight in grams<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.ornamentDetails.GrossWeight, new { Value = "", id = "txtGrossWeight", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6", @onkeypress = "return IsWeight(event,$(this))", onblur = "CalculateNetWeightAndPrice()", autocomplete = "off" })
                @Html.ValidationMessageFor(x => x.ornamentDetails.GrossWeight, "", new { @class = "error offset-6 offset-sm-6 offset-md-4 offset-lg-4" })
            </div>
            <div class="form-group form-inline">
                <label class="col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Stone weight in grams</label>
                @Html.TextBoxFor(x => x.ornamentDetails.StoneWeight, new { Value = "", id = "txtStoneWeight", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6", @onkeypress = "return IsWeight(event,$(this))", onblur = "CalculateNetWeightAndPrice()", autocomplete = "off" })
                @Html.ValidationMessageFor(x => x.ornamentDetails.StoneWeight, "", new { @class = "error offset-6 offset-sm-6 offset-md-4 offset-lg-4" })
            </div>
            <div class="form-group form-inline">
                <label class="col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Net weight in grams<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.ornamentDetails.NetWeight, new { Value = "", id = "txtNetWeight", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6 disable-color", @readonly = "readonly" })
                @Html.ValidationMessageFor(x => x.ornamentDetails.NetWeight, "", new { @class = "error offset-6 offset-sm-6 offset-md-4 offset-lg-4" })
            </div>
            @*<div class="form-group form-inline">
                <label class="col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Market Price<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.ornamentDetails.MarketPrice, new { id = "txtMarketPrice", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6" })
                @Html.ValidationMessageFor(x => x.ornamentDetails.MarketPrice, "", new { @class = "error offset-6 offset-sm-6 offset-md-4 offset-lg-4" })
            </div>*@
            
            <div class="form-group offset-6 offset-sm-6 offset-md-4 offset-lg-4 col-6 col-sm-6 col-md-6 col-lg-6">
                <a class="btn btn-primary" href="/Apraiser/ProcessLoan">Cancel</a>&nbsp;&nbsp;
                <input type="submit" class="btn btn-primary float-right" value="Submit" />
            </div>
        </div>
    </div>
}



<script>
    $(document).ready(function () {
        //var TodayRate = $.parseJSON($("#hdnTodayRate").val());
        $("#txtCreatedOn").datepicker({ dateFormat: "dd-M-yy", buttonImage: "Content/Images/calendar.svg", }).datepicker("setDate", new Date());
        ActiveMenu("liProcessLoan");
        $("#loader").hide();
        $("#spnCalender").click(function () {
            $("#txtCreatedOn").trigger("click");
        })
    })

    IsNumeric = function (e) {
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            e.preventDefault()
        }
    }
    IsName = function (e) {
        var isValid = false;
        var regex = /^[a-zA-Z\. ]*$/;
        isValid = regex.test(e.key);
        if (isValid == false) {
            e.preventDefault()
            return isValid;
        }
    }
    CalculateNetWeightAndPrice = function () {
        
        //var TodayRate = $.parseJSON($("#hdnTodayRate").val());
        var netWt = 0;
        var marketPrice = 0;
        var grossWt = $("#txtGrossWeight").val() == "" ? 0 : $("#txtGrossWeight").val();
        var stoneWt = $("#txtStoneWeight").val() == "" ? 0 : $("#txtStoneWeight").val();
        //var quality = $("#txtQuality").val() == "" ? 1 : $("#txtQuality").val();
        //if ($("#txtQuality").val() != "") {
            //if (TodayRate.BankId == 1) {
                netWt = (grossWt - stoneWt);// * (quality / 100);

                //marketPrice = netWt * TodayRate.Rate;
            //} else {
            //    var s = (grossWt - stoneWt);// * (quality / 100);
            //    netWt = s + ((s * 8) / 100);
            //   // marketPrice = netWt * TodayRate.Rate;
            //}
            $("#txtNetWeight").val(netWt.toFixed(3));
            //$("#txtMarketPrice").val(marketPrice.toFixed(2));
        //}
    }
    SaveCustomerSelf = function () {
        var isValid = true;
        var errorMsg = "";
        if ($("#txtNameSelf").val() == "") {
            errorMsg = "Please fill all amndatory fields."
            isValid = false;
        }
        //if ($("#txtUANSelf").val() == "") {
        //    errorMsg = "Please fill all amndatory fields."
        //    isValid = false;
        //}
        if ($("#txtMobileSelf").val() == "") {
            errorMsg = "Please fill all amndatory fields."
            isValid = false;
        }
        if ($("#txtAddressSelf").val() == "") {
            errorMsg = "Please fill all amndatory fields."
            isValid = false;
        }

        if (isValid == true) {
            //$("#formCustomerSelf").bind("submit");
            $("#formCustomerSelf").submit(function (e) {
                e.currentTarget.submit();
            });
        } else {
            $("#formCustomerSelf").submit(function (e) {
                e.preventDefault();
            });
            //$("#formCustomerSelf").submit(false);
            $("#divError").html(errorMsg);
            $("#divError").show();
        }
    }
</script>


