@model DigitalAppraiser.Models.ViewModels.OrnamentDetailsModel

@{
    ViewBag.Title = "Estimation";
    Layout = "~/Views/Shared/_AppraiserLayout.cshtml";
}

<style>
</style>


@Html.HiddenFor(x => x.ornamentsList[0].LoanType, new { id = "hdnLoanType" })
@Html.HiddenFor(x => x.ornamentsList[0].CreatedOn, new { id = "hdnCreatedOn" })

<div class="container-fluid" style="background-color:#eee;">
    <h2 style="text-align: center;">Preview</h2>
    <div class="row offset-2 col-8">

        <table class="table table-bordered" style="background:#fff;">
            <tr>
                <td>Customer Name</td>
                <td>@Model.CustomerName</td>
            </tr>
            <tr>
                <td>Mobile Number</td>
                <td>@Model.MobileNumber</td>
            </tr>
            @if (Model.ornamentsList[0].LoanType == 1)
            {
                <tr>
                    <td>Aadhar</td>
                    <td>@Model.Aadhar</td>
                </tr>
            }
            <tr>
                <td>Address</td>
                <td>@Model.Address</td>
            </tr>
        </table>
    </div>
    <div class="row col-12" style="padding-left:2rem;">
        <table class="table table-bordered table-responsive-sm table-responsive-md" style="background:#fff;">
            <thead>
                <tr>
                    <th scope="col">S No</th>
                    <th scope="col">Item</th>
                    <th scope="col">Quantity</th>
                    <th scope="col">Gross Weight</th>
                    <th scope="col">Stone Weight</th>
                    @*<th scope="col">Quality</th>*@
                    <th scope="col">Net Weight</th>
                    @if (Model.ornamentsList[0].LoanType == 2)
                    {
                        <th scope="col">Market Price</th>
                    }
                </tr>
            </thead>
            <tbody>
                @{
                    decimal GW = 0;
                    decimal SW = 0;
                    decimal NW = 0;
                    decimal MP = 0;
                    for (int i = 1; i <= Model.ornamentsList.Count(); i++)
                    {
                        GW += Model.ornamentsList[i - 1].GrossWeight;
                        SW += Model.ornamentsList[i - 1].StoneWeight;
                        NW += Model.ornamentsList[i - 1].NetWeight;
                        MP += Model.ornamentsList[i - 1].MarketPrice;
                        <tr>
                            <th scope="row">@i</th>
                            <td><span> @Model.ornamentsList[i - 1].Ornament </span></td>
                            <td>@Model.ornamentsList[i - 1].Quantity </td>
                            <td>@Model.ornamentsList[i - 1].GrossWeight </td>
                            <td>@Model.ornamentsList[i - 1].StoneWeight </td>
                            @*<td>@Model.ornamentsList[i - 1].Quality </td>*@
                            <td>@Model.ornamentsList[i - 1].NetWeight </td>
                            @if (Model.ornamentsList[0].LoanType == 2)
                            {
                                <td>@Model.ornamentsList[i - 1].MarketPrice </td>
                            }
                        </tr>
                    }
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td scope="col" style="font-weight: bold">@GW</td>
                        <td scope="col" style="font-weight: bold">@SW</td>
                        @*<td></td>*@
                        <td scope="col" style="font-weight: bold">@NW</td>
                        @if (Model.ornamentsList[0].LoanType == 2)
                        {
                            <td scope="col" style="font-weight: bold"><span id="spnMarketPrice">@MP</span></td>
                        }
                    </tr>
                }

            </tbody>
        </table>
    </div>

    @Html.HiddenFor(x => x.loanDetails.CustomerId, new { id = "hdnCustomerId" })
    @Html.HiddenFor(x => x.loanDetails.LoanType, new { id = "hdnLoanType" })
    @Html.HiddenFor(x => x.loanDetails.CreatedBy, new { id = "hdnUserName" })
    <br />
    <div class="form-group form-inline" id="divPrinciple">
        <label class="col-6 col-sm-6 col-md-3 col-lg-3 flexLeft">Principle<span style="color:red">*</span></label>
        @Html.TextBoxFor(x => x.loanDetails.LoanAmount, new { Value = "", id = "txtPrinciple", @class = "form-control col-6 col-sm-6 col-md-3 col-lg-3", @onkeypress = "IsNumeric(event)", onblur = "CalculateEMI()", autocomplete = "off" })
        <label id="lblLoanAmount" class="error" style="display:none;">Please enter Loan amount. </label>
    </div>
    <div class="form-group form-inline" id="divEstIntrest">
        <label class="col-6 col-sm-6 col-md-3 col-lg-3 flexLeft">Rate of Interest<span style="color:red">*</span></label>
        @Html.TextBoxFor(x => x.loanDetails.Interest, new { Value = "", id = "txtRateofInterest", @class = "form-control col-6 col-sm-6 col-md-3 col-lg-3", @onkeypress = "return IsWeight(event,$(this))", onblur = "CalculateEMI()", autocomplete = "off" })
        <label id="lblInterest" class="error" style="display:none;">Please enter Interest. </label>
    </div>
    <div class="form-group form-inline" id="divIntrestRate">
        <label class="col-6 col-sm-6 col-md-3 col-lg-3 flexLeft">Estimated Monthly Interest<span style="color:red">*</span></label>
        @Html.TextBoxFor(x => x.loanDetails.EMI, new { id = "txtEstimatedIntrest", @class = "form-control col-6 col-sm-6 col-md-3 col-lg-3 disable-color", @readonly = "readonly" })

        @*<input type="button" class="btn btn-info btn-md" id="btnContinueSelf" value="Continue" data-toggle="modal" onclick="Validate()" />
        <input type="button" style="display:none" class="btn btn-info btn-md" id="btnContinueBank" value="Continue" onclick="GenerateLoan()" />*@
    </div>
    <div class="offset-6 offset-sm-6 offset-md-6 offset-lg-6" id="divBtns">
        <input type="button" class="btn btn-info btn-md" id="btnContinueSelf" value="Continue" data-toggle="modal" onclick="Validate()" />
        <input type="button" style="display:none" class="btn btn-info btn-md" id="btnContinueBank" value="Continue" onclick="GenerateLoan()" />
    </div>
</div>

<div id="divError" class="alert alert-danger col-sm-8" style="display:none">

</div>
<!-- Modal -->
<div class="modal" id="myModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Confirm Loan</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <p>you really want to give loan?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default btn-danger" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-default btn-info" data-dismiss="modal" onclick="GenerateLoan()">Ok</button>
            </div>
        </div>
    </div>
</div>
<script>
    var LoanType = $("#hdnLoanType").val();
    $(document).ready(function () {
        ActiveMenu("liProcessLoan");
        if (LoanType == 1) {
            $("#divPrinciple").show();
            $("#divEstIntrest").show();
            $("#divIntrestRate").show();
            $("#btnContinueSelf").show();
            $("#btnContinueBank").hide();
        } else {
            $("#divBtns").css("margin-top", "-2.5rem");
            $("#divPrinciple").hide();
            $("#divEstIntrest").hide();
            $("#divIntrestRate").hide();
            $("#btnContinueSelf").hide();
            $("#btnContinueBank").show();
        }
        $("#loader").hide();
    })

    IsNumeric = function (e) {
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            e.preventDefault()
        }
    }
    Validate = function () {
        
        var isValid = true;
        var errorMsg = "";
        if ($("#txtPrinciple").val() == "") {
            isValid = false;
            $("#lblLoanAmount").show();
        } else {
            $("#lblLoanAmount").hide();
        }
        if ($("#txtRateofInterest").val() == "") {
            isValid = false;
            $("#lblInterest").show();
        } else {
            $("#lblInterest").hide();
        }
        if (isValid == true) {
            $("#lblLoanAmount").hide();
            $("#lblInterest").hide();
            $("#myModal").modal('show');
        } else {

        }
    }
    CalculateEMI = function () {
        var principle = $("#txtPrinciple").val();
        var interest = $("#txtRateofInterest").val();
        if (principle != "" && interest != "") {
            var emi = (principle * interest) / 100;
            $("#txtEstimatedIntrest").val(emi);
        }
    }
    GenerateLoan = function () {
        
        var model = {
            ID: 0,
            CustomerId: $("#hdnCustomerId").val(),
            LoanType: LoanType,
            LoanAmount: LoanType == 1 ? $("#txtPrinciple").val() : $("#spnMarketPrice").text(),
            Interest: $("#txtRateofInterest").val(),
            EMI: $("#txtEstimatedIntrest").val(),
            IsActive: true,
            CreatedBy: $("#hdnUserName").val(),
            ModifiedBy: $("#hdnUserName").val(),
            CreatedOn: $("#hdnCreatedOn").val()
        };
        $.ajax({
            url: "/Apraiser/GenerateLoan",
            type: "POST",
            cache: false,
            data: { model: model },
            success: function (data) {
                $("#myModal").modal('hide');
                $("#divMain").html(data);
                
            },
            error: function (error) {

            }
        })
    }
    GenerateLoanBank = function () {

    }
    IsWeight = function (evt, element) {
        //if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
        //    e.preventDefault()
        //}

        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57) && !(charCode == 46 || charCode == 8 || charCode == 45))
            return false;
        else {
            var len = $(element).val().length;
            // Validation Point
            var index = $(element).val().indexOf('.');
            if (index > -1 && charCode == 46) {
                return false;
            }
            if (index > 0 || index == 0) {
                var CharAfterdot = (len + 1) - index;
                if (CharAfterdot > 3) {
                    return false;
                }
            }

            // Validating Negative sign
            index = $(element).val().indexOf('-');
            if (index = '-1' && charCode == 45) {
                return false;
            }
        }
        return true;
    }
</script>