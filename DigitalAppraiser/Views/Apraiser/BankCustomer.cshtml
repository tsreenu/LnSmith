@model DigitalAppraiser.Models.ViewModels.BankCustomerModel

@using (Html.BeginForm("BankCustomer", "Apraiser", FormMethod.Post, new { id = "formCustomerBank" }))
{
    @*@Html.HiddenFor(x => x.BankId, new { id = "hdnBankId" })*@
    @*@Html.HiddenFor(x=>x.Banks)*@
    <input type="hidden" id="hdnTodayRate" />
    <div class="col-12 col-sm-12 col-md-12 col-lg-12 row">
        <div class="col-12 col-sm-12 col-md-6 col-lg-6" style="width:50%;">
            <h3 class="h3 text-center"> Customer Details</h3>
            <div class="form-group form-inline">
                <label class="offset-md-1 offset-lg-1 col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Bank<span style="color:red">*</span></label>
                @Html.DropDownListFor(x => x.selectedBank, Model.Banks, "Select", new { id = "ddBank", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6 width100", @onchange = "GetTodayRate()" })
                @Html.ValidationMessageFor(x => x.selectedBank, "", new { @class = "error offset-6 offset-sm-6 offset-md-6 offset-lg-6" })
            </div>
            <div class="form-group form-inline">
                <label class="offset-md-1 offset-lg-1 col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Branch<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.bankCustomer.Branch, new { id = "txtBranch", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6", autocomplete = "off" })
                @Html.ValidationMessageFor(x => x.bankCustomer.Branch, "", new { @class = "error offset-6 offset-sm-6 offset-md-6 offset-lg-6" })
            </div>
            <div class="form-group form-inline">
                <label class="offset-md-1 offset-lg-1 col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Name<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.bankCustomer.Name, new { id = "txtName", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6", autocomplete = "off" })
                @Html.ValidationMessageFor(x => x.bankCustomer.Name, "", new { @class = "error offset-6 offset-sm-6 offset-md-6 offset-lg-6" })
            </div>
            <div class="form-group form-inline">
                <label class="offset-md-1 offset-lg-1 col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Relation Type<span style="color:red">*</span></label>
                @Html.DropDownListFor(x => x.bankCustomer.RelationType, Model.RelationTypes, "Select", new { id = "txtRelationType", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6 width100" })
                @Html.ValidationMessageFor(x => x.bankCustomer.RelationType, "", new { @class = "error offset-6 offset-sm-6 offset-md-6 offset-lg-6" })
            </div>
            <div class="form-group form-inline">
                <label class="offset-md-1 offset-lg-1 col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Relation Name<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.bankCustomer.RelationName, new { id = "txtRelationName", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6", autocomplete = "off" })
                @Html.ValidationMessageFor(x => x.bankCustomer.RelationName, "", new { @class = "error offset-6 offset-sm-6 offset-md-6 offset-lg-6" })
            </div>
            <div class="form-group form-inline">
                <label class="offset-md-1 offset-lg-1 col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Address<span style="color:red">*</span></label>
                @Html.TextAreaFor(x => x.bankCustomer.Address, new { id = "txtAddress", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6" })
                @Html.ValidationMessageFor(x => x.bankCustomer.Address, "", new { @class = "error offset-6 offset-sm-6 offset-md-6 offset-lg-6" })
            </div>
            <div class="form-group form-inline">
                <label class="offset-md-1 offset-lg-1 col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Mobile Number<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.bankCustomer.MobileNumber, new { id = "txtMobileNumber", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6", @maxlength = "10", @onkeypress = "IsNumeric(event)", autocomplete = "off" })
                @Html.ValidationMessageFor(x => x.bankCustomer.MobileNumber, "", new { @class = "error offset-6 offset-sm-6 offset-md-6 offset-lg-6" })
            </div>
        </div>
        <div class="col-12 col-sm-12 col-md-6 col-lg-6">
            <h3 class="h3 text-center"> Ornament Details</h3>
            <div class="form-group form-inline">
                <label class="col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Ornament<span style="color:red">*</span></label>
                @Html.TextAreaFor(x => x.ornamentDetails.Ornament, new { id = "txtOrnament", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6" })
                @Html.ValidationMessageFor(x => x.ornamentDetails.Ornament, "", new { @class = "error offset-6 offset-sm-6 offset-md-4 offset-lg-4" })
            </div>
            <div class="form-group form-inline">
                <label class="col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Quantity<span style="color:red">*</span></label>
                @Html.DropDownListFor(x => x.ornamentDetails.Quantity, Model.Quantity, "Select", new { id = "ddQuantity", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6 width100", autocomplete = "off" })
                @Html.ValidationMessageFor(x => x.ornamentDetails.Quantity, "", new { @class = "error offset-6 offset-sm-6 offset-md-4 offset-lg-4" })
            </div>
            <div class="form-group form-inline">
                <label class="col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Gross weight in grams<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.ornamentDetails.GrossWeight, new { Value = "", id = "txtGrossWeightBank", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6", @onkeypress = "return IsWeight(event,$(this))", autocomplete = "off", onblur = "CalculateNetWeightAndPriceBank()" })
                @Html.ValidationMessageFor(x => x.ornamentDetails.GrossWeight, "", new { @class = "error offset-6 offset-sm-6 offset-md-4 offset-lg-4" })
            </div>
            <div class="form-group form-inline">
                <label class="col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Stone weight in grams</label>
                @Html.TextBoxFor(x => x.ornamentDetails.StoneWeight, new { Value = "", id = "txtStoneWeightBank", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6", @onkeypress = "return IsWeight(event,$(this))", autocomplete = "off", onblur = "CalculateNetWeightAndPriceBank()" })
                @Html.ValidationMessageFor(x => x.ornamentDetails.StoneWeight, "", new { @class = "error offset-6 offset-sm-6 offset-md-4 offset-lg-4" })
            </div>
            <div class="form-group form-inline">
                <label class="col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Quality<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.ornamentDetails.Quality, new { Value = "", id = "txttxtQualityBank", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6", @onkeypress = "return IsWeight(event,$(this))", autocomplete = "off", onblur = "CalculateNetWeightAndPriceBank()" })
                @Html.ValidationMessageFor(x => x.ornamentDetails.Quality, "", new { @class = "error offset-6 offset-sm-6 offset-md-4 offset-lg-4" })
            </div>
            <div class="form-group form-inline">
                <label class="col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Net weight in grams<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.ornamentDetails.NetWeight, new { Value = "", id = "txtNetWeightBank", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6 disable-color", @readonly = "readonly" })
                @Html.ValidationMessageFor(x => x.ornamentDetails.NetWeight, "", new { @class = "error offset-6 offset-sm-6 offset-md-4 offset-lg-4" })
            </div>
            <div class="form-group form-inline">
                <label class="col-6 col-sm-6 col-md-4 col-lg-4 flexLeft">Market Price<span style="color:red">*</span></label>
                @Html.TextBoxFor(x => x.ornamentDetails.MarketPrice, new { Value = "", id = "txtMarketPriceBank", @class = "form-control col-6 col-sm-6 col-md-6 col-lg-6 disable-color", @readonly = "readonly" })
                @Html.ValidationMessageFor(x => x.ornamentDetails.MarketPrice, "", new { @class = "error offset-6 offset-sm-6 offset-md-4 offset-lg-4" })
            </div>
            <div class="form-group offset-6 offset-sm-6 offset-md-4 offset-lg-4 col-6 col-sm-6 col-md-6 col-lg-6">
                <a class="btn btn-primary" href="/Apraiser/ProcessLoan">Cancel</a>&nbsp;&nbsp;
                <input type="submit" class="btn btn-primary float-right" value="Submit" />
            </div>
        </div>
    </div>
}
<script>
    $(document).ready(function () {
        //$("#txtDateSelf").datepicker({ dateFormat: "dd-mm-yy" }).datepicker("setDate", new Date());
    })
    IsNumeric = function (e) {
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            e.preventDefault()
        }
    }
    CalculateNetWeightAndPriceBank = function () {

        var TodayRate = $("#hdnTodayRate").val();
        if (TodayRate != "") {
            if ($("#txttxtQualityBank").val() != "") {
                var netWt = 0;
                var marketPrice = 0;
                var grossWt = $("#txtGrossWeightBank").val() == "" ? 0 : $("#txtGrossWeightBank").val();
                var stoneWt = $("#txtStoneWeightBank").val() == "" ? 0 : $("#txtStoneWeightBank").val();
                var quality = $("#txttxtQualityBank").val() == "" ? 1 : $("#txttxtQualityBank").val();

                var s = (grossWt - stoneWt) * (quality / 100);
                netWt = s + ((s * 8) / 100);
                marketPrice = netWt * TodayRate;

                $("#txtNetWeightBank").val(netWt.toFixed(3));
                $("#txtMarketPriceBank").val(marketPrice.toFixed(2));
            }
        }else {
            alert("Please select any bank.");
        }

    }

    GetTodayRate = function () {
        if ($("#ddBank").val() != "") {
            $.ajax({
                url: "/Apraiser/GetTodayRate",
                type: "GET",
                cache: false,
                data: { bankId: $("#ddBank").val() },
                success: function (data) {
                    $("#hdnTodayRate").val(data.Rate);
                },
                error: function (error) {

                }
            })
        }
    }
</script>
